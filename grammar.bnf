; Pone grammar v 0.2

<program> ::= (<global-definition>)* <expr>

<global-definition> ::= <type-definition>
                      | <global-function-definition>
                      | <interface-definition>
                      | <interface-implementation>

<type> ::= "(" <type> ")"
         | <type> "->" <type>
         | (<type-variable> | <type-identifier>) (<type>)* ; condensed to apply later?

<type-definition> ::= "type" <type-identifier> <type-variable>* "is" <type-list> "end"

<type-list> ::= ("|" <type-ctor>)*

<type-ctor> ::= <type-identifier> (<type-identifier> | <type-variable>)*

<type-identifier> ::= '[A-Z][a-zA-Z0-9]*'

<type-variable> ::= '[a-z][a-zA-Z0-9]*'

<identifier> ::= '[a-z][a-zA-Z0-9]*'

<function-signature> ::= "define" <identifier> (<identifier>)* <type-annotation>

<abstract-function> ::= <function-signature> "abstract"

<function-definition> ::= <function-signature> "as" <expr>

<global-function-definition> :: <function-definition> "end"

<type-annotation> ::= ":" <type> ("where" <constraint-list>)?

<constraint-list> ::= "(" <constraint> ("," <constraint>)* ")"

<constraint> ::= <type-variable> "<" <type>

<interface-definition> ::= "interface" <type> ("extends" <type>)? "is" <interface-body> "end"

<interface-body> ::= (<function-definition> | <abstract-function>) *

<interface-implementation> ::= "implement" <type> "for" <type> ("where" <constraint-list>)? "as" (<global-function-definition>)* "end"

<expr-no-apply> ::= <identifier>
                  | <type-identifier>
                  | <literal>
                  | <lambda>
                  | <local-bind>
                  | <pattern-match>
                  | "unknown"

<expr> ::= <function-application>
         | <expr-no-apply>

<literal> ::= float | int | string

<lambda> ::= "[" "Î»" <identifier> "." <expr> "]"

<local-bind> ::= <function-definition> "in" <expr>

<pattern-match> ::= "match" <expr> "with" (<pattern-branch>)* "end"

<pattern-branch> ::= "|" <pattern> "->" <expr>

<pattern> ::= <type-identifier> (<type>)* | <literal> | <identifier>

<function-application> ::= <expr-no-apply> (<expr-no-apply>)+
